<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.1.xsd


			http://www.springframework.org/schema/data/jpa
   			http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <context:property-placeholder location="classpath:/conf.properties" />

    <jpa:repositories base-package="ua.com.jon.common.repository"/>
    <jpa:repositories base-package="ua.com.jon.quiz.repository"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="jpaDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--
        INFO ua.com.jon.examinator.server.ExamineServiceImpl: -== getSprints() ==-
        WARN org.hibernate.engine.jdbc.spi.SqlExceptionHelper: SQL Error: 0, SQLState: 08S01
        ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper: The last packet successfully received from the server was 48,754,692 milliseconds ago.  The last packet sent successfully to the server was 48,754,693 milliseconds ago. is longer than the server configured value of 'wait_timeout'. You should consider either expiring and/or testing connection validity before use in your application, increasing the server configured values for client timeouts, or using the Connector/J connection property 'autoReconnect=true' to avoid this problem.
        -->
        <!-- DBCP Connection Pool Settings -->
        <property name="defaultAutoCommit" value="true" />
        <property name="initialSize" value="10" />
        <property name="maxActive" value="500" />
        <property name="maxIdle" value="8" />
        <property name="minIdle" value="0" />
        <property name="maxWait" value="30000" />
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="false" />
        <!--http://stackoverflow.com/questions/30336861/spring-boot-communications-link-failure-after-some-hours-of-inactivity-with-hib

        timeBetweenEvictionRunsMillis - тот же самый параметр, что и для инвалидации холостых соединений. Дело в том, что как проверка времени простоя соединений, так и прогревание происходят в одном потоке, а данный параметр указывает на сколько времени поток будет засыпать.
        -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <property name="numTestsPerEvictionRun" value="3" />
        <property name="minEvictableIdleTimeMillis" value="180000" />
        <property name="poolPreparedStatements" value="false" />
        <!--maxOpenPreparedStatements should be set to a value less than the maximum number of cursors that can be open on a Connection.-->
        <property name="maxOpenPreparedStatements" value="500" />
        <property name="accessToUnderlyingConnectionAllowed" value="false" />
        <property name="removeAbandoned" value="false" />
        <property name="removeAbandonedTimeout" value="300" />
        <property name="logAbandoned" value="false" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="jpaDataSource"/>
    </bean>
<!--
    <bean id="jpaDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-methodName="close"
          p:driverClass="${jdbc.driverClassName}"
          p:jdbcUrl="${jdbc.url}"
          p:sprintEvent="${jdbc.username}"
          p:password="${jdbc.password}"
          p:acquireIncrement="5"
          p:idleConnectionTestPeriod="60"
          p:maxPoolSize="100"
          p:maxStatements="50"
          p:minPoolSize="10" />
-->

    <!-- Declare a JPA entityManagerFactory -->
<!--
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:persistenceXmlLocation="./WEB-INF/persistence.xml"
          p:persistenceUnitName="hibernatePersistenceUnit"
          p:dataSource-ref="jpaDataSource"
          p:jpaVendorAdapter-ref="hibernateVendor"/>
-->

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="jpaDataSource" />
        <!--TODO: remove repsistance.xml-->
        <!--<property fileName="persistenceXmlLocation" value="/WEB-INF/data/persistence.xml"/>-->
        <!--<property fileName="persistenceUnitName" value="courcesPU"/>-->
        <property name="packagesToScan">
            <list>
                <value>ua.com.jon.common.domain</value>
                <value>ua.com.jon.quiz.domain</value>
            </list>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!--<property fileName="generateDdl" value="true" />-->
                <!--<property groupId="showSql" value="true"/>-->
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- Specify our ORM vendor -->
    <bean id="hibernateVendor" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
          p:showSql="true"/>

    <!-- Declare a transaction manager-->
<!--
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>
-->

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

</beans>